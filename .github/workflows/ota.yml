name: Extract Boot Images and Firmware

on:
  workflow_dispatch:
    inputs:
      fileurl:
        description: 'Full OTA package URL (OxygenOS/ColorOS)'
        required: true
        type: string

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  extract-images:
    runs-on: ubuntu-latest
    outputs:
      release-url: ${{ steps.create-release.outputs.release-url }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y aria2 unzip jq

      - name: Get otadump Tool
        run: |
          wget -qO otadump.tar.gz "https://github.com/crazystylus/otadump/releases/download/0.1.2/otadump-0.1.2-x86_64-unknown-linux-gnu.tar.gz"
          tar xzf otadump.tar.gz
          chmod +x otadump
          rm -f otadump.tar.gz LICENSE README.md

      - name: Download OTA Package
        run: |
          aria2c -x16 -s16 -o ota.zip --user-agent='Dalvik/2.1.0 (Linux; V; Android 15; PKR110 Build/AQ3A.240617.008)' "${{ inputs.fileurl }}"
          [ -f ota.zip ] || { echo "OTA download failed"; exit 1; }

      - name: Extract Payload
        run: |
          unzip -q ota.zip -d ota_unpacked
          [ -f ota_unpacked/payload.bin ] || { echo "payload.bin missing"; exit 1; }

      - name: Determine Build Version
        id: version-info
        run: |
          REL_NAME=$(grep 'version_name=' ota_unpacked/META-INF/com/android/metadata | cut -d= -f2)
          echo "version=${REL_NAME}" >> $GITHUB_OUTPUT
          echo "REL_NAME=${REL_NAME}" >> $GITHUB_ENV

      - name: Extract Boot Images
        run: |
          ./otadump ota_unpacked/payload.bin --output-dir boot_extract --partitions boot,init_boot
          cp boot_extract/{boot,init_boot}.img .
          sha1sum boot.img > boot.img.sha1
          sha1sum init_boot.img > init_boot.img.sha1

      - name: Prepare Firmware Package
        run: |
          ./otadump ota_unpacked/payload.bin --output-dir fw_extract \
            --partitions abl,aop,aop_config,bluetooth,cpucp,devcfg,dsp,engineering_cdt,featenabler,hyp,imagefv,keymaster,modem,oplus_sec,oplusstanvbk,qupfw,shrm,splash,tz,uefi,uefisecapp,xbl,xbl_config,xbl_ramdump
          
          mkdir -p firmware_images
          cp -r fw_extract/* firmware_images/
          
          wget -qO firmware_images/install_images.bat https://raw.githubusercontent.com/rin0011/opace5_pro_fw/main/install_images.bat
          wget -qO firmware_images/install_images.sh https://raw.githubusercontent.com/rin0011/opace5_pro_fw/main/install_images.sh
          
          zip -qr firmware_package.zip firmware_images

      - name: Create GitHub Release
        id: create-release
        run: |
          
          RAW_VERSION="${{ env.REL_NAME}}"
          SAFE_VERSION=$(echo "${RAW_VERSION}" | sed -e 's/[()]/_/g' -e 's/[^a-zA-Z0-9_.-]//g')
          DISPLAY_VERSION=$(echo "${RAW_VERSION}" | sed -e 's/(/\\\(/g' -e 's/)/\\\)/g')
          
          gh release create ${{ env.REL_NAME }} \
            --title "Build ${{ env.REL_NAME }}" \
            --notes "" \
            boot.img \
            init_boot.img \
            *.sha1 \
            firmware_package.zip

          RELEASE_URL=$(gh release view ${{ env.REL_NAME }} --json url -q .url)
          echo "release-url=${RELEASE_URL}" >> $GITHUB_OUTPUT